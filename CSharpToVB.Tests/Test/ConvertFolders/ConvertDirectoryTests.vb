' Licensed to the .NET Foundation under one or more agreements.
' The .NET Foundation licenses this file to you under the MIT license.
' See the LICENSE file in the project root for more information.

Imports System.IO
Imports System.Reflection
Imports System.Threading
Imports CSharpToVBApp
Imports CSharpToVBConverter
Imports CSharpToVBConverter.ConversionResult

Imports Microsoft.CodeAnalysis
Imports Microsoft.CodeAnalysis.Emit

Imports Xunit

Namespace ConvertDirectory.Tests

    ''' <summary>
    ''' Return False to skip test
    ''' </summary>
    <TestClass()> Public Class TestCompile
        Private _lastFileProcessed As String

        Public Shared ReadOnly Property EnableRoslynTests() As Boolean
            Get
                Return Directory.Exists(GetRoslynRootDirectory)
            End Get
        End Property

        Private Async Function TestProcessDirectoryAsync(SourceDirectory As String) As Task(Of Boolean)
            Return Await ProcessDirectoryAsync(MainForm:=Nothing, SourceDirectory, TargetDirectory:="", StopButton:=Nothing, ListBoxFileList:=Nothing, SourceLanguageExtension:="cs", New ProcessingStats(""), AddressOf Me.TestProcessFileAsync, CancellationToken.None).ConfigureAwait(continueOnCapturedContext:=True)
        End Function

        Friend Function TestProcessFileAsync(MainForm As Form1, PathWithFileName As String, TargetDirectory As String, _0 As String, CSPreprocessorSymbols As List(Of String), VBPreprocessorSymbols As List(Of KeyValuePair(Of String, Object)), OptionalReferences() As MetadataReference, SkipAutoGenerated As Boolean, CancelToken As CancellationToken) As Task(Of Boolean)
            ' Save to TargetDirectory not supported
            Assert.True(String.IsNullOrWhiteSpace(TargetDirectory))
            ' Do not delete the next line or the parameter it is needed by other versions of this routine
            _lastFileProcessed = PathWithFileName
            Using fs As FileStream = File.OpenRead(PathWithFileName)
                Dim requestToConvert As ConvertRequest = New ConvertRequest(mSkipAutoGenerated:=True,
                                                                            mProgress:=Nothing,
                                                                            CancelToken) With {.SourceCode = fs.GetFileTextFromStream()}

                Dim resultOfConversion As ConversionResult = ConvertInputRequest(requestToConvert,
                                                                                 New DefaultVBOptions,
                                                                                 CSPreprocessorSymbols,
                                                                                 VBPreprocessorSymbols,
                                                                                 CSharpReferences(Assembly.Load("System.Windows.Forms").Location, OptionalReferences).ToArray,
                                                                                 ReportException:=Nothing,
                                                                                 mProgress:=Nothing,
                                                                                 CancellationToken.None)
                If resultOfConversion.ResultStatus = ResultTriState.Failure Then
                    Return Task.FromResult(False)
                End If
                Dim compileResult As (CompileSuccess As Boolean, EmitResult As EmitResult) = CompileVisualBasicString(StringToBeCompiled:=resultOfConversion.ConvertedCode, VBPreprocessorSymbols, DiagnosticSeverity.Error, resultOfConversion)
                If Not compileResult.CompileSuccess OrElse resultOfConversion.GetFilteredListOfFailures().Any Then
                    Dim msg As String = If(compileResult.CompileSuccess, resultOfConversion.GetFilteredListOfFailures()(0).GetMessage, "Fatal Compile error")
                    Throw New ApplicationException($"{PathWithFileName} failed to compile with error :{vbCrLf}{msg}")
                    Return Task.FromResult(False)
                End If
            End Using
            Return Task.FromResult(True)
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCoreAnalyzersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "Core", "Analyzers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCoreCodeFixesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "Core", "CodeFixes")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersAddAccessibilityModifiersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "AddAccessibilityModifiers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersAddBracesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "AddBraces")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersAddRequiredParenthesesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "AddRequiredParentheses")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersConvertAnonymousTypeToTupleConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "ConvertAnonymousTypeToTuple")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersConvertSwitchStatementToExpressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "ConvertSwitchStatementToExpression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersConvertTypeofToNameofConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "ConvertTypeofToNameof")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersFileHeadersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "FileHeaders")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersInlineDeclarationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "InlineDeclaration")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersInvokeDelegateWithConditionalAccessConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "InvokeDelegateWithConditionalAccess")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersMakeLocalFunctionStaticConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "MakeLocalFunctionStatic")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersMakeStructFieldsWritableConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "MakeStructFieldsWritable")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersMisplacedUsingDirectivesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "MisplacedUsingDirectives")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersNamingStyleConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "NamingStyle")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersOrderModifiersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "OrderModifiers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersPopulateSwitchConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "PopulateSwitch")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersQualifyMemberAccessConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "QualifyMemberAccess")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveConfusingSuppressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveConfusingSuppression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveRedundantEqualityConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveRedundantEquality")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveUnnecessaryCastConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveUnnecessaryCast")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveUnnecessaryImportsConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveUnnecessaryImports")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveUnnecessaryParenthesesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveUnnecessaryParentheses")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveUnnecessarySuppressionsConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveUnnecessarySuppressions")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveUnreachableCodeConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveUnreachableCode")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveUnusedMembersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveUnusedMembers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersRemoveUnusedParametersAndValuesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "RemoveUnusedParametersAndValues")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersSimplifyBooleanExpressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "SimplifyBooleanExpression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersSimplifyInterpolationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "SimplifyInterpolation")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseAutoPropertyConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseAutoProperty")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseCoalesceExpressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseCoalesceExpression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseCollectionInitializerConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseCollectionInitializer")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseCompoundAssignmentConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseCompoundAssignment")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseConditionalExpressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseConditionalExpression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseDeconstructionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseDeconstruction")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseDefaultLiteralConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseDefaultLiteral")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseExpressionBodyConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseExpressionBody")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseImplicitObjectCreationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseImplicitObjectCreation")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseImplicitOrExplicitTypeConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseImplicitOrExplicitType")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseIndexOrRangeOperatorConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseIndexOrRangeOperator")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseInferredMemberNameConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseInferredMemberName")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseIsNullCheckConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseIsNullCheck")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseLocalFunctionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseLocalFunction")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseNullPropagationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseNullPropagation")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseObjectInitializerConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseObjectInitializer")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUsePatternCombinatorsConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UsePatternCombinators")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUsePatternMatchingConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UsePatternMatching")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseSimpleUsingStatementConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseSimpleUsingStatement")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersUseThrowExpressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "UseThrowExpression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpAnalyzersValidateFormatStringConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Analyzers", "ValidateFormatString")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesAddAccessibilityModifiersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "AddAccessibilityModifiers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesAddBracesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "AddBraces")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesConvertAnonymousTypeToTupleConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "ConvertAnonymousTypeToTuple")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesConvertSwitchStatementToExpressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "ConvertSwitchStatementToExpression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesConvertTypeOfToNameOfConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "ConvertTypeOfToNameOf")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesFileHeadersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "FileHeaders")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesInlineDeclarationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "InlineDeclaration")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesInvokeDelegateWithConditionalAccessConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "InvokeDelegateWithConditionalAccess")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesMakeFieldReadonlyConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "MakeFieldReadonly")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesMakeStructFieldsWritableConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "MakeStructFieldsWritable")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesMisplacedUsingDirectivesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "MisplacedUsingDirectives")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesOrderModifiersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "OrderModifiers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesPopulateSwitchConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "PopulateSwitch")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesQualifyMemberAccessConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "QualifyMemberAccess")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesRemoveConfusingSuppressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "RemoveConfusingSuppression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesRemoveUnnecessaryCastConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "RemoveUnnecessaryCast")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesRemoveUnnecessaryImportsConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "RemoveUnnecessaryImports")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesRemoveUnnecessaryParenthesesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "RemoveUnnecessaryParentheses")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesRemoveUnreachableCodeConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "RemoveUnreachableCode")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesRemoveUnusedMembersConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "RemoveUnusedMembers")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesRemoveUnusedParametersAndValuesConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "RemoveUnusedParametersAndValues")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesSimplifyInterpolationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "SimplifyInterpolation")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseCollectionInitializerConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseCollectionInitializer")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseCompoundAssignmentConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseCompoundAssignment")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseConditionalExpressionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseConditionalExpression")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseDeconstructionConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseDeconstruction")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseDefaultLiteralConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseDefaultLiteral")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseExpressionBodyConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseExpressionBody")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseImplicitObjectCreationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseImplicitObjectCreation")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseImplicitOrExplicitTypeConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseImplicitOrExplicitType")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseIndexOrRangeOperatorConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseIndexOrRangeOperator")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseInferredMemberNameConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseInferredMemberName")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseIsNullCheckConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseIsNullCheck")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseNullPropagationConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseNullPropagation")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseObjectInitializerConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseObjectInitializer")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUsePatternMatchingConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UsePatternMatching")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpCodeFixesUseSimpleUsingStatementConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "CodeFixes", "UseSimpleUsingStatement")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

        <Trait("Category", "SkipWhenLiveUnitTesting")>
        <ConditionalFact(NameOf(EnableRoslynTests))>
        Public Async Function AnalyzersCSharpTestsConvertAsync() As Task
            Assert.True(Await Me.TestProcessDirectoryAsync(Path.Combine(GetRoslynRootDirectory(), "src", "Analyzers", "CSharp", "Tests")).ConfigureAwait(True), $"Failing file {_lastFileProcessed}")
        End Function

    End Class

End Namespace
